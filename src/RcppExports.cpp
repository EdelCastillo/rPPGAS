// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// imzMLBinReadAllMz
Rcpp::NumericVector imzMLBinReadAllMz(const char* ibdFname, Rcpp::List imzML);
RcppExport SEXP _rPPGAS_imzMLBinReadAllMz(SEXP ibdFnameSEXP, SEXP imzMLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type imzML(imzMLSEXP);
    rcpp_result_gen = Rcpp::wrap(imzMLBinReadAllMz(ibdFname, imzML));
    return rcpp_result_gen;
END_RCPP
}
// testingimzMLBinWriteSequential
Rcpp::DataFrame testingimzMLBinWriteSequential(const char* ibdFname, Rcpp::String mz_dataTypeString, Rcpp::String int_dataTypeString, Rcpp::String str_uuid, Rcpp::NumericMatrix mzArray, Rcpp::NumericMatrix intArray);
RcppExport SEXP _rPPGAS_testingimzMLBinWriteSequential(SEXP ibdFnameSEXP, SEXP mz_dataTypeStringSEXP, SEXP int_dataTypeStringSEXP, SEXP str_uuidSEXP, SEXP mzArraySEXP, SEXP intArraySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type str_uuid(str_uuidSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mzArray(mzArraySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type intArray(intArraySEXP);
    rcpp_result_gen = Rcpp::wrap(testingimzMLBinWriteSequential(ibdFname, mz_dataTypeString, int_dataTypeString, str_uuid, mzArray, intArray));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinCreateNewIBD
void CimzMLBinCreateNewIBD(const char* ibdFname, Rcpp::String str_uuid);
RcppExport SEXP _rPPGAS_CimzMLBinCreateNewIBD(SEXP ibdFnameSEXP, SEXP str_uuidSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type str_uuid(str_uuidSEXP);
    CimzMLBinCreateNewIBD(ibdFname, str_uuid);
    return R_NilValue;
END_RCPP
}
// CimzMLBinAppendMass
uint64_t CimzMLBinAppendMass(const char* ibdFname, Rcpp::String mz_dataTypeString, Rcpp::NumericVector mzNew);
RcppExport SEXP _rPPGAS_CimzMLBinAppendMass(SEXP ibdFnameSEXP, SEXP mz_dataTypeStringSEXP, SEXP mzNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzNew(mzNewSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinAppendMass(ibdFname, mz_dataTypeString, mzNew));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinAppendIntensity
uint64_t CimzMLBinAppendIntensity(const char* ibdFname, Rcpp::String int_dataTypeString, Rcpp::NumericVector intNew);
RcppExport SEXP _rPPGAS_CimzMLBinAppendIntensity(SEXP ibdFnameSEXP, SEXP int_dataTypeStringSEXP, SEXP intNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type intNew(intNewSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinAppendIntensity(ibdFname, int_dataTypeString, intNew));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinWriteModifyMass
void CimzMLBinWriteModifyMass(const char* ibdFname, unsigned int NPixels, Rcpp::String mz_dataTypeString, Rcpp::String int_dataTypeString, bool continuous, Rcpp::NumericVector mzNew, uint64_t mzOffset);
RcppExport SEXP _rPPGAS_CimzMLBinWriteModifyMass(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP mz_dataTypeStringSEXP, SEXP int_dataTypeStringSEXP, SEXP continuousSEXP, SEXP mzNewSEXP, SEXP mzOffsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mz_dataTypeString(mz_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type int_dataTypeString(int_dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mzNew(mzNewSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type mzOffset(mzOffsetSEXP);
    CimzMLBinWriteModifyMass(ibdFname, NPixels, mz_dataTypeString, int_dataTypeString, continuous, mzNew, mzOffset);
    return R_NilValue;
END_RCPP
}
// CimzMLBinReadMass
Rcpp::NumericVector CimzMLBinReadMass(const char* ibdFname, unsigned int NPixels, unsigned int N, uint64_t offset, Rcpp::String dataTypeString, bool continuous);
RcppExport SEXP _rPPGAS_CimzMLBinReadMass(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP NSEXP, SEXP offsetSEXP, SEXP dataTypeStringSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataTypeString(dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinReadMass(ibdFname, NPixels, N, offset, dataTypeString, continuous));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLBinReadIntensity
Rcpp::NumericVector CimzMLBinReadIntensity(const char* ibdFname, unsigned int NPixels, unsigned int N, uint64_t offset, Rcpp::String dataTypeString, bool continuous);
RcppExport SEXP _rPPGAS_CimzMLBinReadIntensity(SEXP ibdFnameSEXP, SEXP NPixelsSEXP, SEXP NSEXP, SEXP offsetSEXP, SEXP dataTypeStringSEXP, SEXP continuousSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type NPixels(NPixelsSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type N(NSEXP);
    Rcpp::traits::input_parameter< uint64_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataTypeString(dataTypeStringSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous(continuousSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLBinReadIntensity(ibdFname, NPixels, N, offset, dataTypeString, continuous));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLReadPeakList
Rcpp::List CimzMLReadPeakList(const char* ibdFname, Rcpp::List imzML_peakList_descriptor, unsigned int PixelID);
RcppExport SEXP _rPPGAS_CimzMLReadPeakList(SEXP ibdFnameSEXP, SEXP imzML_peakList_descriptorSEXP, SEXP PixelIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type imzML_peakList_descriptor(imzML_peakList_descriptorSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type PixelID(PixelIDSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLReadPeakList(ibdFname, imzML_peakList_descriptor, PixelID));
    return rcpp_result_gen;
END_RCPP
}
// overwriteIbdUUid
void overwriteIbdUUid(const char* ibdFname, Rcpp::String newUUID);
RcppExport SEXP _rPPGAS_overwriteIbdUUid(SEXP ibdFnameSEXP, SEXP newUUIDSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type newUUID(newUUIDSEXP);
    overwriteIbdUUid(ibdFname, newUUID);
    return R_NilValue;
END_RCPP
}
// Cload_imzMLSpectra
Rcpp::NumericMatrix Cload_imzMLSpectra(Rcpp::List rMSIobj, Rcpp::IntegerVector pixelIDs, Rcpp::NumericVector commonMassAxis, unsigned int number_of_threads);
RcppExport SEXP _rPPGAS_Cload_imzMLSpectra(SEXP rMSIobjSEXP, SEXP pixelIDsSEXP, SEXP commonMassAxisSEXP, SEXP number_of_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type rMSIobj(rMSIobjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pixelIDs(pixelIDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type commonMassAxis(commonMassAxisSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type number_of_threads(number_of_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cload_imzMLSpectra(rMSIobj, pixelIDs, commonMassAxis, number_of_threads));
    return rcpp_result_gen;
END_RCPP
}
// Cload_imzMLImages
Rcpp::NumericMatrix Cload_imzMLImages(Rcpp::List rMSIobj, Rcpp::IntegerVector pixelIDs, Rcpp::IntegerVector massIndex, Rcpp::NumericVector commonMassAxis, unsigned int number_of_threads);
RcppExport SEXP _rPPGAS_Cload_imzMLImages(SEXP rMSIobjSEXP, SEXP pixelIDsSEXP, SEXP massIndexSEXP, SEXP commonMassAxisSEXP, SEXP number_of_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type rMSIobj(rMSIobjSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pixelIDs(pixelIDsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type massIndex(massIndexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type commonMassAxis(commonMassAxisSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type number_of_threads(number_of_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(Cload_imzMLImages(rMSIobj, pixelIDs, massIndex, commonMassAxis, number_of_threads));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLParse
List CimzMLParse(String xml_path);
RcppExport SEXP _rPPGAS_CimzMLParse(SEXP xml_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type xml_path(xml_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLParse(xml_path));
    return rcpp_result_gen;
END_RCPP
}
// CimzMLStore
bool CimzMLStore(String fname, List imgInfo, const char* mass_spectrometer_file_format);
RcppExport SEXP _rPPGAS_CimzMLStore(SEXP fnameSEXP, SEXP imgInfoSEXP, SEXP mass_spectrometer_file_formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< List >::type imgInfo(imgInfoSEXP);
    Rcpp::traits::input_parameter< const char* >::type mass_spectrometer_file_format(mass_spectrometer_file_formatSEXP);
    rcpp_result_gen = Rcpp::wrap(CimzMLStore(fname, imgInfo, mass_spectrometer_file_format));
    return rcpp_result_gen;
END_RCPP
}
// peakMatrix
List peakMatrix(const char* ibdFname, Rcpp::List imzML, Rcpp::List params, float mzLow, float mzHigh, int nThreads);
RcppExport SEXP _rPPGAS_peakMatrix(SEXP ibdFnameSEXP, SEXP imzMLSEXP, SEXP paramsSEXP, SEXP mzLowSEXP, SEXP mzHighSEXP, SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type ibdFname(ibdFnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type imzML(imzMLSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type params(paramsSEXP);
    Rcpp::traits::input_parameter< float >::type mzLow(mzLowSEXP);
    Rcpp::traits::input_parameter< float >::type mzHigh(mzHighSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(peakMatrix(ibdFname, imzML, params, mzLow, mzHigh, nThreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rPPGAS_imzMLBinReadAllMz", (DL_FUNC) &_rPPGAS_imzMLBinReadAllMz, 2},
    {"_rPPGAS_testingimzMLBinWriteSequential", (DL_FUNC) &_rPPGAS_testingimzMLBinWriteSequential, 6},
    {"_rPPGAS_CimzMLBinCreateNewIBD", (DL_FUNC) &_rPPGAS_CimzMLBinCreateNewIBD, 2},
    {"_rPPGAS_CimzMLBinAppendMass", (DL_FUNC) &_rPPGAS_CimzMLBinAppendMass, 3},
    {"_rPPGAS_CimzMLBinAppendIntensity", (DL_FUNC) &_rPPGAS_CimzMLBinAppendIntensity, 3},
    {"_rPPGAS_CimzMLBinWriteModifyMass", (DL_FUNC) &_rPPGAS_CimzMLBinWriteModifyMass, 7},
    {"_rPPGAS_CimzMLBinReadMass", (DL_FUNC) &_rPPGAS_CimzMLBinReadMass, 6},
    {"_rPPGAS_CimzMLBinReadIntensity", (DL_FUNC) &_rPPGAS_CimzMLBinReadIntensity, 6},
    {"_rPPGAS_CimzMLReadPeakList", (DL_FUNC) &_rPPGAS_CimzMLReadPeakList, 3},
    {"_rPPGAS_overwriteIbdUUid", (DL_FUNC) &_rPPGAS_overwriteIbdUUid, 2},
    {"_rPPGAS_Cload_imzMLSpectra", (DL_FUNC) &_rPPGAS_Cload_imzMLSpectra, 4},
    {"_rPPGAS_Cload_imzMLImages", (DL_FUNC) &_rPPGAS_Cload_imzMLImages, 5},
    {"_rPPGAS_CimzMLParse", (DL_FUNC) &_rPPGAS_CimzMLParse, 1},
    {"_rPPGAS_CimzMLStore", (DL_FUNC) &_rPPGAS_CimzMLStore, 3},
    {"_rPPGAS_peakMatrix", (DL_FUNC) &_rPPGAS_peakMatrix, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_rPPGAS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
